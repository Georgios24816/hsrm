/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "hamster.h"

bool_t
xdr_hmstr_rpc_new_req (XDR *xdrs, hmstr_rpc_new_req *objp)
{
	register int32_t *buf;

	int i;
	 if (!xdr_vector (xdrs, (char *)objp->owner_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_vector (xdrs, (char *)objp->hamster_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->treats))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_new_resp (XDR *xdrs, hmstr_rpc_new_resp *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->uid))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_lookup_req (XDR *xdrs, hmstr_rpc_lookup_req *objp)
{
	register int32_t *buf;

	int i;
	 if (!xdr_vector (xdrs, (char *)objp->owner_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_vector (xdrs, (char *)objp->hamster_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_lookup_resp (XDR *xdrs, hmstr_rpc_lookup_resp *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->uid))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_directory_req (XDR *xdrs, hmstr_rpc_directory_req *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->fdptr))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->owner_name, sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_pointer (xdrs, (char **)&objp->hamster_name, sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_directory_resp (XDR *xdrs, hmstr_rpc_directory_resp *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->uid))
		 return FALSE;
	 if (!xdr_int32_t (xdrs, &objp->fdptr))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_howsdoing_req (XDR *xdrs, hmstr_rpc_howsdoing_req *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->ID))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->treats_left))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->rounds))
		 return FALSE;
	 if (!xdr_int16_t (xdrs, &objp->cost))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_howsdoing_resp (XDR *xdrs, hmstr_rpc_howsdoing_resp *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->zero))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->treats_left))
		 return FALSE;
	 if (!xdr_uint32_t (xdrs, &objp->rounds))
		 return FALSE;
	 if (!xdr_int16_t (xdrs, &objp->cost))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_readentry_req (XDR *xdrs, hmstr_rpc_readentry_req *objp)
{
	register int32_t *buf;

	int i;
	 if (!xdr_int32_t (xdrs, &objp->ID))
		 return FALSE;
	 if (!xdr_vector (xdrs, (char *)objp->owner_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_vector (xdrs, (char *)objp->hamster_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_int16_t (xdrs, &objp->price))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_readentry_resp (XDR *xdrs, hmstr_rpc_readentry_resp *objp)
{
	register int32_t *buf;

	int i;
	 if (!xdr_int32_t (xdrs, &objp->treats))
		 return FALSE;
	 if (!xdr_vector (xdrs, (char *)objp->owner_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_vector (xdrs, (char *)objp->hamster_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	 if (!xdr_int16_t (xdrs, &objp->price))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_givetreats_req (XDR *xdrs, hmstr_rpc_givetreats_req *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->uid))
		 return FALSE;
	 if (!xdr_uint16_t (xdrs, &objp->treats))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_givetreats_resp (XDR *xdrs, hmstr_rpc_givetreats_resp *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->treats))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_collect_req (XDR *xdrs, hmstr_rpc_collect_req *objp)
{
	register int32_t *buf;

	int i;
	 if (!xdr_vector (xdrs, (char *)objp->owner_name, 32,
		sizeof (char), (xdrproc_t) xdr_char))
		 return FALSE;
	return TRUE;
}

bool_t
xdr_hmstr_rpc_collect_resp (XDR *xdrs, hmstr_rpc_collect_resp *objp)
{
	register int32_t *buf;

	 if (!xdr_int32_t (xdrs, &objp->price))
		 return FALSE;
	return TRUE;
}
