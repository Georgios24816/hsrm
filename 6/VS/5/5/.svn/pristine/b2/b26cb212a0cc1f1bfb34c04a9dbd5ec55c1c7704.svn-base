/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "hamster.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

hmstr_rpc_new_resp *
hmstr_new_1(hmstr_rpc_new_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_new_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_NEW,
		(xdrproc_t) xdr_hmstr_rpc_new_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_new_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

hmstr_rpc_lookup_resp *
hmstr_lookup_1(hmstr_rpc_lookup_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_lookup_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_LOOKUP,
		(xdrproc_t) xdr_hmstr_rpc_lookup_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_lookup_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

hmstr_rpc_directory_resp *
hmstr_directory_1(hmstr_rpc_directory_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_directory_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_DIRECTORY,
		(xdrproc_t) xdr_hmstr_rpc_directory_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_directory_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

hmstr_rpc_howsdoing_resp *
hmstr_howsdoing_1(hmstr_rpc_howsdoing_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_howsdoing_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_HOWSDOING,
		(xdrproc_t) xdr_hmstr_rpc_howsdoing_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_howsdoing_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

hmstr_rpc_readentry_resp *
hmstr_readentry_1(hmstr_rpc_readentry_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_readentry_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_READENTRY,
		(xdrproc_t) xdr_hmstr_rpc_readentry_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_readentry_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

hmstr_rpc_givetreats_resp *
hmstr_givetreats_1(hmstr_rpc_givetreats_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_givetreats_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_GIVETREATS,
		(xdrproc_t) xdr_hmstr_rpc_givetreats_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_givetreats_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

hmstr_rpc_collect_resp *
hmstr_collect_1(hmstr_rpc_collect_req *argp, CLIENT *clnt)
{
	static hmstr_rpc_collect_resp clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, HMSTR_COLLECT,
		(xdrproc_t) xdr_hmstr_rpc_collect_req, (caddr_t) argp,
		(xdrproc_t) xdr_hmstr_rpc_collect_resp, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
