#if 0
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "hamster.h"

void
hmstr_prog_1(char *host)
{
	CLIENT *clnt;
	hmstr_rpc_new_resp  *result_1;
	hmstr_rpc_new_req  hmstr_new_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, HMSTR_PROG, HMSTR_VERS, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = hmstr_new_1(&hmstr_new_1_arg, clnt);
	if (result_1 == (hmstr_rpc_new_resp *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	hmstr_prog_1 (host);
exit (0);
}
#endif

#include "hamster.h"
#include "../libsrc/hamsterdef.h"

hmstr_rpc_new_resp* hmstr_new_1_svc(hmstr_rpc_new_req* argp, struct svc_req* req)
{
	static hmstr_rpc_new_resp ret;
	ret.uid = hmstr_new(argp->owner_name, argp->hamster_name, argp->treats);

	return &ret;
}

hmstr_rpc_lookup_resp* hmstr_lookup_1_svc(hmstr_rpc_lookup_req* argp, struct svc_req* req)
{
	static  hmstr_rpc_lookup_resp ret;
	ret.uid = hmstr_lookup(argp->hamster_name, argp->hamster_name);

	return &ret;
}

hmstr_rpc_directory_resp* hmstr_directory_1_svc(hmstr_rpc_directory_req* argp, struct svc_req* req)
{
	static hmstr_rpc_directory_resp ret;
	ret.fdptr = argp->fdptr;
	ret.uid = hmstr_directory(&(ret.fdptr), argp->owner_name, argp->hamster_name);

	return &ret;
}

hmstr_rpc_howsdoing_resp* hmstr_howsdoing_1_svc(hmstr_rpc_howsdoing_req* argp, struct svc_req* req)
{
	static hmstr_rpc_howsdoing_resp ret;
	struct hmstr_state state;

	ret.zero = hmstr_howsdoing(argp->ID, &state);
	ret.cost = state.cost;
	ret.rounds = state.rounds;
	ret.treats_left = state.treats_left;

	return &ret;
}

hmstr_rpc_readentry_resp* hmstr_readentry_1_svc(hmstr_rpc_readentry_req* argp, struct svc_req* req)
{
	static hmstr_rpc_readentry_resp ret;
	ret.treats = hmstr_readentry(argp->ID, ret.owner_name, ret.hamster_name, &ret.price);

	return &ret;
}

hmstr_rpc_givetreats_resp* hmstr_givetreats_1_svc(hmstr_rpc_givetreats_req* argp, struct svc_req* req)
{
	static hmstr_rpc_givetreats_resp ret;
	ret.treats = hmstr_givetreats(argp->uid, argp->treats);

	return &ret;
}

hmstr_rpc_collect_resp* hmstr_collect_1_svc(hmstr_rpc_collect_req* argp, struct svc_req* req)
{
	static hmstr_rpc_collect_resp ret;
	ret.price = hmstr_collect(argp->owner_name);

	return &ret;
}